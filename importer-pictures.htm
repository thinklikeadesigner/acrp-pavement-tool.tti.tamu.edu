<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
	<title>ACRP 09-11</title>
   <!-- Bootstrap -->
    <link href="css/bootstrap.min.css" rel="stylesheet">
    <link href="css/bootstrap-theme.min.css" rel="stylesheet">
    <link href="css/acrp0911.css" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    
    <style type="text/css">
      .hit-count { font-size: 2rem; font-weight: bold; }
      .th-inverse { 
        color: #FFF;
        background-color: #363636;
      }    

      .sticky-controls li { list-style-type: none; }
      .controls .control { float: left; display: inline; margin: 1rem; list-style-type: none; }


      select[disabled=disabled] { color: #999; text-indent: -900px; }

      .thumbs img { width: 30%; margin-right: 1rem; box-shadow: 2px 2px 2px #777; cursor: pointer; }

      img.pci-curve { width: 100px; float: right; cursor: pointer; }


      .output { display: none; }

      .required { color: #f02; font-size: 1rem; line-height: 1rem; }

      /** lightbox stuff **/      
      .box {
        width: 100%;
        padding: 0;
        border-radius: 0.5rem;
        box-shadow: 0rem 0rem 2rem #333;
        margin-top: 50px;
      }      
      .box .close {
        font-weight: normal;
        letter-spacing: 0.1rem;
        top: 25px;
        right: 25px;
        border-radius: 5px;
        opacity: 0.2;
      }
      .box img {
        cursor: pointer;
        width: 100%;
        border-radius: 0.5rem; /* 20px;*/
      }      


      input[type=file] { display: block; }

    </style>
</head>

<body>
  <header class="navbar navbar-static-top navbar-inverse" id="top" role="banner">
  <div class="container v2">
    <div class="navbar-header">
      <button class="navbar-toggle collapsed" type="button" data-toggle="collapse" data-target=".bs-navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a href="index.htm" class="navbar-brand">ACRP 09-11</a>
    </div>
    <nav class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav">
        <li>
          <a href="index.htm">Home</a>
        </li>
        <li class="active">
          <a href="facility.htm">Your Facility</a>
        </li>
        <li>
          <a href="calculator.htm">
            Cost-Benefit Calculator
          </a>
        </li>
        <li>
          <a href="distresses.htm">All Distresses</a>
        </li>
        
        <li>
          <a href="final-report.htm">Project Final Report</a>
        </li>
      </ul>
      
    </nav>
  </div><!-- end .container -->
  </header>

  <!-- <div class="jumbotron"> -->
  <div class="container">
    <div class="page-header">
    </div> 
  </div>
<!-- </div> -->


  <div class="container">

    
    <div class="row show-grid">
   <!--  <div class="col-md-1"></div> -->
    <div class="col-md-12">

    
    <label>Pavement Type</label>
    <input type="radio" name="pavementType" value="asphalt" checked="checked" /> Asphalt
    <input type="radio" name="pavementType" value="concrete" /> Concrete
    <input id="file" type="file" style="" />

    <textarea class="json-output"></textarea>


    <div class="stage">
    </div><!-- stage -->

    <button class="btn btn-new-scenario" style="display: none;"><i class="fa fa-plus"></i> New Distress</button>


    </div><!-- end .row.show-grid -->
    <!-- <div class="col-md-1"></div> -->
    </div>


    <div class="ballpark-wrap" style="display:none;">
      <input class="ballpark-checkbox" type="checkbox"> Use the Ballpark Benefit/Cost Estimator?

      <div class="ballpark" style="display:none;">
        Please enter the length and width, in feet, of feature<br/>
        <input class="length" type="text" placeholder=" length (feet)">
        <input class="width" type="text" placeholder=" width (feet)">
      </div><!-- ballpark -->

      <br />
      <br />
      <button class="btn btn-danger btn-pdf"><i class="fa fa-file-pdf-o"></i> View PDF Report</button>
      <div class="output"></div>

    </div><!-- ballpark-wrap -->
    






  </div><!-- container -->

	<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="js/bootstrap.min.js"></script>
    <script src="jquery-1.11.3.min.js"></script>

    <script src="lib/accounting.min.js"></script>




    <script src="js/array.js"></script>
    <script src="js/eachify.js"></script>
    <script src="js/dom.js"></script>
    <script src="js/tti.pubsub.js"></script>
    <script src="js/tti.storage.js"></script>
    <script src="js/csvjson.js"></script>






    <!--<script src="js/tti.widgets.tco-estimator.js"></script>-->
    <script src="js/tti.widgets.lightbox.js"></script>
    <script src="js/tti.guru.js"></script>
    
    <script src="lib/TTI.js"></script>
    <script src="js/tti.datastore.js"></script>
    <script src="js/bootup.js"></script>
    <!--<script src="lib/jsPDF/jspdf.js"></script>-->
    <script src="lib/jsPDF/dist/jspdf.debug.js"></script>


    <script src='lib/jsPDF/libs/require/require.js'></script>
    <script type="text/javascript">

      require(['lib/jsPDF/libs/require/config'], function(){
        require(['lib/jsPDF/test/test_harness', 'lib/jsPDF/plugins/from_html'], function(){
          var x = 123;
          
          ////////console.log(jsPDF);
          
          
        });
      });

    </script>





  <script type="text/javascript">

  
    var fileInput = jQuery('#file');
  
    TTI.errors = [];
  
    TTI.precision = function(value,digits) {
      var coeff = Math.pow(10,digits);
      return Math.round(value * coeff) / coeff;
    };
    
  TTI.sorter = function(selectorFunc) {
    var sortFunc = function(a,b) {
      var sA = selectorFunc(a);
      var sB = selectorFunc(b);
      if (sA < sB) { return -1; }
      if (sA > sB) { return 1; }
      return 0;
    };
    return sortFunc;
  };
  







  TTI.Image = function(spec) {
    var self = TTI.PubSub({});
    self.spec = spec;
    
    self.allTags = function() {
      var result = [];
      
      result = result.concat(TTI.tagify(spec.filename));
      result = result.concat(TTI.tagify(spec.description));
      result = result.concat(TTI.tagify(spec.extraTags));
      return result;
    };
    self.url = function() {
      return 'implementors responsibility';//////////images/distresses/' + spec.filename;
    };
    
    return self;  
  };
  
  
  TTI.DistressImage = function(spec) {
    var self = TTI.Image(spec);
    self.url = function() {
      return 'images/distresses/' + spec.filename;
    };
  
    return self;  
  }
  

  TTI.PCICurveImage = function(spec) {
    var self = TTI.Image(spec);
  
    self.url = function() {
      return 'images/pci-curves/' + spec.filename;
    };
  
    self.distressTags = function() {
      var parts = spec.filename.split(/\./);
      var subset = parts.splice(2);
      var joined = subset.join(',');
      var result = TTI.tagify(joined);      
      return result;    
    };
  
    self.treatmentTags = function() {
      var parts = spec.filename.split(/\./);
      var subset = parts.splice(1,1);
      var joined = subset.join(',');
      var result = TTI.tagify(joined);      
      return result;    
    };
  
    return self;  
  };



    
    TTI.sticky = {};


    var stickyDimensions = [
        /** these are now sticky.**/
        { label: 'Airport Classification', property: 'category', choices: ['Regional','National','Basic','Local'] },
        //{ label: 'Wet/Dry', property: 'wetDry', choices: ['wet','dry'] },
        //{ label: 'Freeze/No Freeze', property: 'freezeNoFreeze', choices: ['freeze','no freeze'] },
        { label: 'Pavement Type (concrete or asphalt)', property: 'surfaceType', choices: ['concrete','asphalt'] },
        /**/
    ];

    
    var fileInput = jQuery('#file');  
    fileInput.change(function(e){
      //console.log('fi',fileInput);
      var file = fileInput.prop('files')[0];
      var reader = new FileReader();
      reader.onload = function(e) {
        var input = reader.result;
        ///console.log('text input',input);
        campfire.publish('parse-input',input);
      };
      
      reader.readAsText(file);
    });
    
    
    function noTrailingComma(o) {
      var result = o.trim();
      result = result.replace(/,\ +$/,'');
      result = result.replace(/,$/,'');
      return result;
    }

    function noTrailingDash(o) {
      var result = o.trim();
      result = result.replace(/-\ +$/,'');
      result = result.replace(/-$/,'');
      return result;
    }
    
    function cleanUp(o) {
      ///console.log('cleanup called');
      if (o.severity) {
        o.severity = o.severity.trim();
        if (o.severity && o.severity.match(/sev$/i)) { o.severity += 'erity';  }
        if (o.severity && o.severity.match(/lowsev/i)) { o.severity = 'Low severity'; }
        if (o.severity && o.severity.match(/medsev/i)) { o.severity = 'Medium severity'; }
        if (o.severity && o.severity.match(/modsev/i)) { o.severity = 'Medium severity'; }
        if (o.severity && o.severity.match(/hi\ *sev/i)) { 
          ////console.log('match!!!!');
          o.severity = 'High severity'; 
        }
        if (o.severity && o.severity.match(/mod\ sev/i)) { o.severity = 'Medium severity'; }
        if (o.severity && o.severity.match(/med\ sev/i)) { o.severity = 'Medium severity'; }
      }
      if (o.amount) {
        o.amount = noTrailingDash(o.amount);
        o.amount = noTrailingComma(o.amount);
      }
      if (o.distressType) {
        o.distressType = noTrailingDash(o.distressType);
        o.distressType = noTrailingComma(o.distressType);
      }

      if (o.treatment.best) { o.treatment.best = o.treatment.best.replace(/,*\ or\ .*$/,''); }
      if (o.treatment.accept) { o.treatment.accept = o.treatment.accept.replace(/,*\ or\ .*$/,''); }
      ///o.severity = 'asdfasdf';
    }
    
    
    function parseRow(opts) {
    
      var columnAlpha = ['A','B','C','D','E','F','G','H','I','J','K','L'];
    
    
      var data = opts.data;
      var row = opts.row;
      var category = opts.category;
      
      
      var wetDry = false;
      var freezeNoFreeze = false;
      var distressDesc = data[0];

      var wf = {}, df = {}, dnf = {}, wnf = {};

      function parseColumn(o) {
      
      
        if (o.row == 86) {
          var x = 12;
        }
      
      
        var result = o.target;
        result.row = o.row;
        result.column = o.column; 
        //result.cell = o.row + columnAlpha[o.column];       
        result.distressDesc = distressDesc;
        result.wetDry = o.wetDry;
        result.freezeNoFreeze = o.freezeNoFreeze;
        result.category = category;
        
        
        result.severity = false;
        result.amount = false;

        result.distressType = result.distressDesc;

        function severityMatch(match) {
          if (match) {
            result.severity = result.distressType.substr(match.index);
            result.distressType = result.distressType.substr(0,match.index);
            /////console.log('TYPE',result.distressType,'SEVERITY',result.severity);
          }
        }

        function amountMatch(match) {
          if (match) {
            result.amount = result.distressType.substr(match.index);
            result.distressType = result.distressType.substr(0,match.index);
            ///console.log('TYPE',result.distressType,'* ** * ** * AMOUNT',result.amount);
          }
        }



        ////var match;
        
        ///match = result.distressType.match(/low.*sev.*/i);
        severityMatch(result.distressType.match(/low.*sev.*/i));
        severityMatch(result.distressType.match(/med.*sev.*/i));
        severityMatch(result.distressType.match(/mod.*sev.*/i));
        severityMatch(result.distressType.match(/hi.*sev.*/i));


        amountMatch(result.distressType.match(/spaced.*apart.*/i));
        amountMatch(result.distressType.match(/\d+%.*/i));
        


        if (!result.amount) { 
          var error = 'NO AMOUNT';
          ///console.log(error,result.distressDesc); 
          TTI.errors.push(error + ':' + result.distressDesc); 
        }
        if (!result.severity) { 
          var error = 'NO SEVERITY';
          //console.log(error,result.distressDesc); 
          TTI.errors.push(error + ':' + result.distressDesc); 
        }

        

        /****        
        if (match) {
          result.severity = result.distressType.substr(match.index);
          result.distressType = result.distressType.substr(0,match.index);
          console.log('low SEVERITY!!!','TYPE',result.distressType,'SEVERITY',result.severity);
        }
        ****/
        
        if (typeof result.treatment == "undefined") {
          result.treatment = {};
        }
        result.treatment[o.treatmentType] = data[o.column];
        result.treatment[o.treatmentType + 'Cell'] = o.row + columnAlpha[o.column];       
        
        
        var test = result.treatment[o.treatmentType + 'Cell'];
        if (test.match(/86F|86G/)) {
          var y = 22;
        } 
        


        result.surfaceType = TTI.pavementType;


        
        cleanUp(result);

        if (result.amount && result.amount.match(/,/)) { console.log('okkk',result.amount +'GYN'); }
        
        
        
        var scenario = TTI.scenarios.detect(function(s){
          return s.spec.surfaceType == result.surfaceType && s.spec.row == result.row && s.spec.column == result.column;
        });
        if (scenario) {
          console.log('scenario hit',scenario);
          scenario.spec.treatment.bestPCICurveImage = result.treatment.best;
          scenario.spec.treatment.acceptPCICurveImage = result.treatment.accept;
        }
        
        return result;
      }

      wf = parseColumn({
        target: wf,
        row: row,
        column: 1,
        category: category,
        treatmentType: 'accept',
        wetDry: 'wet',
        freezeNoFreeze: 'freeze',
      });

      wf = parseColumn({
        target: wf,
        row: row,
        column: 2,
        category: category,
        treatmentType: 'best',
        wetDry: 'wet',
        freezeNoFreeze: 'freeze',
      });

      df = parseColumn({
        target: df,
        row: row,
        column: 3,
        category: category,
        treatmentType: 'accept',
        wetDry: 'dry',
        freezeNoFreeze: 'freeze',
      });

      df = parseColumn({
        target: df,
        row: row,
        column: 4,
        category: category,
        treatmentType: 'best',
        wetDry: 'dry',
        freezeNoFreeze: 'freeze',
      });

      dnf = parseColumn({
        target: dnf,
        row: row,
        column: 5,
        category: category,
        treatmentType: 'accept',
        wetDry: 'dry',
        freezeNoFreeze: 'no freeze',
      });

      dnf = parseColumn({
        target: dnf,
        row: row,
        column: 6,
        category: category,
        treatmentType: 'best',
        wetDry: 'dry',
        freezeNoFreeze: 'no freeze',
      });


      wnf = parseColumn({
        target: wnf,
        row: row,
        column: 7,
        category: category,
        treatmentType: 'accept',
        wetDry: 'wet',
        freezeNoFreeze: 'no freeze',
      });

      wnf = parseColumn({
        target: wnf,
        row: row,
        column: 8,
        category: category,
        treatmentType: 'best',
        wetDry: 'wet',
        freezeNoFreeze: 'no freeze',
      });


      TTI.pictures.push(wf);
      TTI.pictures.push(df);
      TTI.pictures.push(dnf);
      TTI.pictures.push(wnf);

    }
    
    
    campfire.subscribe('parse-input',function(input){
      //console.log('input',input);

      TTI.pavementType = jQuery('input[type=radio]:checked').val();


      var sanitized = TTI.replaceWordChars(input);
      TTI.inspectMSText(sanitized);
      
      TTI.sanitized = sanitized;
      
      var lines = sanitized.split(/\r\n|\n/);
      ///console.log('lines',lines,lines.length);
      
      var category = false;
      var wetDry = false;
      var freezeNoFreeze = false;    
      
      
      lines.forEach(function(line,row){      
      
        var foo = csvjson.csv2json(line);
        var fields = foo.headers;
        
        //console.log('foo',foo);
        ///console.log('fields',fields);

        if (fields[1].match(/Category/)) {
          if (fields[1].match(/National/)) { category = 'National'; }
          if (fields[1].match(/Regional/)) { category = 'Regional'; }
          if (fields[1].match(/Local/)) { category = 'Local'; }
          if (fields[1].match(/Basic/)) { category = 'Basic'; }
          console.log('cat!!!',fields[1]);
          //Don't Parse
        }
        else if (line.length < 25) {
          //Don't Parse
        }
        else if (fields[1].match(/Accept/) && fields[2].match(/Best/) ) {
          //Don't parse
        }
        else if (row == 0) {
          //Don't parse
        }
        else {
          //console.log('parse?',line);
          parseRow({
            category: category,
            data: fields,
            row: row+1,
          });
        }
        
        var halt = true;
        
        
        ///var recordType = fields.shift();      
        ///campfire.publish('record-' + recordType,fields);
      });
    });
    
    
    var stateDropdown = jQuery('#state');
    var countyDropdown = jQuery('#county');
    
    

    campfire.subscribe('import-json',function(){
      TTI.importJSON('data/concrete.json',function(data){
        //console.log('data',data);
        data.each(function(o){
          o.surfaceType = 'concrete';
          cleanUp(o);
          TTI.scenarios.push(TTI.Scenario(o));
        });
      });
  
      TTI.importJSON('data/asphalt.json',function(data){
        //console.log('data',data);
        data.each(function(o){
          o.surfaceType = 'asphalt';
          cleanUp(o);
          TTI.scenarios.push(TTI.Scenario(o));
        });
      });


      TTI.importJSON('data/concrete-costs.json',function(data){
        data.each(function(o){
          TTI.costs.push(o);
        });
      });
      TTI.importJSON('data/asphalt-costs.json',function(data){
        data.each(function(o){
          TTI.costs.push(o);
        });
      });



      TTI.importJSON('data/concrete-benefits.json',function(data){
        data.each(function(o){
          TTI.benefits.push(o);
        });
      });
      TTI.importJSON('data/asphalt-benefits.json',function(data){
        data.each(function(o){
          TTI.benefits.push(o);
        });
      });

      
      
      TTI.import('data/distress-images.csv',function(data){
        var foo = csvjson.csv2json(data);
        /////console.log('foo',foo);
        foo.rows.each(function(row){
          TTI.distressImages.push(TTI.DistressImage(row));
        });
      });
      
      TTI.import('data/pci-curves.csv',function(data){
        var foo = csvjson.csv2json(data);
        ////console.log('foo',foo);
        foo.rows.each(function(row){
          TTI.pciCurveImages.push(TTI.PCICurveImage(row));
        });
      });
      
      
      
      TTI.selectedState = false;
      TTI.selectedCounty = false;
      
      
      //TODO: Alaska, Oregon+Marion, Texas+Guadalupe have multiple climate records
      
      
      TTI.states = new TTI.Acrp.States("data/ClimaticZones.csv", function () {
      				///populateStateAndCountyLists();
        TTI.states.forEach(function(state){
          var opt = DOM.option(state.name);
          stateDropdown.append(opt);        
        });
        stateDropdown.change(function(){
          /////console.log('this.value',this.value);
          TTI.selectedState = TTI.states.get(this.value);
          ////console.log('state',TTI.selectedState);
          if (TTI.selectedState.counties) {
            countyDropdown.show();
            countyDropdown.empty();
            TTI.selectedState.counties.forEach(function(county){
              var opt = DOM.option(county.name);
              countyDropdown.append(opt);        
            });
            countyDropdown.trigger('change'); //make the first one which populates active
            
          }
          else {
            countyDropdown.hide();
            campfire.publish('climate-change',TTI.selectedState.climate);
          }
        });
        stateDropdown.trigger('change'); //make the first one which populates active
        
        
        countyDropdown.change(function(){
          TTI.selectedCounty = TTI.selectedState.counties.get(this.value);
          campfire.publish('climate-change',TTI.selectedCounty.climate);
          ////console.log('TTI.selectedCounty',TTI.selectedCounty);
        });
      });
    
    });
    
    var stage = jQuery('.stage');
    
    var stickyControls = jQuery('.sticky-controls');
    
    campfire.subscribe('boot-ui',function(){
        stickyDimensions.each(function(sd){
          var dimension = sd.property;
          
          
          var choiceItems = sd.choices.map(function(o){
            return { label: o, object: o };
          });
          choiceItems.unshift({label: 'Choose one', object: false });
          
          
          
          var dropdown = DOM.select();
          choiceItems.each(function(choice){
            var opt = DOM.option(choice.label);
            dropdown.append(opt);
          });
          dropdown.change(function(){
            var selected = choiceItems[this.selectedIndex].object;
            TTI.sticky[dimension] = selected;
            campfire.publish('sticky-changed',TTI.sticky);
          });
          
          
          var control = DOM.li().addClass('control');
          control.append(DOM.label(sd.label));
          control.append('&nbsp;');
          control.append(DOM.i('&nbsp;').addClass('fa fa-asterisk required'));
          control.append(DOM.br());
          control.append(dropdown);
          stickyControls.append(control);
        });
    });

    campfire.publish('import-json');
    campfire.publish('boot-ui');
    
    var btnNewScenario = jQuery('.btn-new-scenario');

    btnNewScenario.click(function(){ campfire.publish('new-scenario'); });
    
    campfire.subscribe('new-scenario',function(){
      var candidates = TTI.getStickyScenarios();
      var guru = TTI.Guru({ 
        candidates: candidates
      });

      var drillDown = DOM.div().addClass('drill-down'); 
      guru.renderOn(drillDown);
      stage.append(drillDown);
      TTI.gurus.push(guru);
      campfire.publish('guru-added',guru);
      
      guru.subscribe('single-hit',function(){
        campfire.publish('show-ballpark-checkbox');
        campfire.publish('single-hit',guru);
      });
      guru.subscribe('image-clicked',function(url){
        campfire.publish('image-clicked',url);
      });
    });
    
    campfire.subscribe('sticky-changed',function(){
      TTI.gurus.each(function(guru){
        guru.update(TTI.sticky);
      });
      
      
      console.log('sticky-changed!!!wooo',TTI.sticky);
        var proceed = TTI.sticky.wetDry && TTI.sticky.freezeNoFreeze && TTI.sticky.category && TTI.sticky.surfaceType;
        
        if (proceed) {
          btnNewScenario.show();
        }

      
    });
    campfire.subscribe('climate-change',function(climate){
      var condition = TTI.Acrp.ClimateCondition[climate.condition]
      var temp = TTI.Acrp.ClimateTemperature[climate.condition]    
      temp = temp.toLowerCase();
      condition = condition.toLowerCase();
      temp = (temp == 'nofreeze') ? 'no freeze' : temp;
      
      ///console.log('condition',condition);
      /////console.log('temp',temp);



      if (condition == 'wetanddry') { condition = 'wet'; }//FIXME
      if (temp == 'freezeandnofreeze') { temp = 'freeze'; }//FIXME


      
      TTI.sticky.wetDry = condition;
      TTI.sticky.freezeNoFreeze = temp;
    });
    
    var facilityName = jQuery('#facility-name');
    facilityName.change(function(){
      TTI.storage.facilityName = this.value;
    });
    if (TTI.storage.facilityName) {
      facilityName.val(TTI.storage.facilityName);
    }
    
    
    campfire.subscribe('redraw-output',function(){


      var table;    
      var tr;
      var td;
      var th;


      output.empty();

      ////var today = new Date();
      //var dateString = (today.getMonth() +1) + '/' + today.getDate() + '/' + today.getFullYear();
      //var timeString = today.getHours() + ':' + today.getMinutes()
      
      var dateTimeString = TTI.prettyDate(new Date());
      output.append(DOM.div(dateTimeString));
      
      
      table = DOM.table();
      
      if (TTI.storage.facilityName) {
        tr = DOM.tr();
        tr.append(DOM.th('Facility Name'));
        tr.append(DOM.td(TTI.storage.facilityName));
        table.append(tr);      
      }
      
      stickyDimensions.each(function(o){
        tr = DOM.tr();
        tr.append(DOM.th(o.label));
        tr.append(DOM.td(TTI.sticky[o.property]));
        table.append(tr);
      });
      
      
      

      tr = DOM.tr();
      tr.append(DOM.th('Climate'));
      var climateString = TTI.sticky.wetDry + ' / ' + TTI.sticky.freezeNoFreeze;
      tr.append(DOM.td(climateString));
      table.append(tr);
      output.append(table);      


    
      TTI.gurus.forEach(function(guru,i){
        output.append('<!-- ADD_PAGE -->');        


        output.append(DOM.h2('Distress #' + (i+1)));
        table = DOM.table();
        orderedDimensions.each(function(o){
          var value = guru.hit.spec[o.property];
          if (value && typeof value != "undefined") {
            tr = DOM.tr();
            tr.append(DOM.th(o.label));
            tr.append(DOM.td(value));
            table.append(tr);
          }
        });
        
        
        
        if (lengthInput.val() && widthInput.val()) {
          tr = DOM.tr();
          tr.append(DOM.th('Dimensions'));
          
          var length = parseFloat(lengthInput.val());
          var width = parseFloat(widthInput.val());
          var sqft = length*width;
          
          var dimString = accounting.toFixed(length,1) + ' ft x ' + accounting.toFixed(width,1) + ' ft (' + accounting.toFixed(sqft,1) + ' sqft)';
          tr.append(DOM.td(dimString));
          table.append(tr);
        }


        
        output.append(table);

        if (guru.hit.spec.treatment.acceptTCO) {
          output.append(DOM.div('Cost, Benefit, and Benefit/Cost figures are ballpark estimates'));
        }
        
        table = DOM.table();
        //header
        var headRow = DOM.tr();
        headRow.append(DOM.th('&nbsp;'));
        headRow.append(DOM.th('Treatments'));

        if (guru.hit.spec.treatment.bestTCO) {
          headRow.append(DOM.th('Cost'));
          headRow.append(DOM.th('Benefit'));
          headRow.append(DOM.th('B/C'));
        }
        table.append(headRow);
        

        //rec
        tr = DOM.tr();
        tr.append(DOM.th('Recommended'));
        tr.append(DOM.td(guru.hit.spec.treatment.best));
        if (guru.hit.spec.treatment.bestTCO) {
          tr.append(DOM.td(accounting.formatMoney(guru.hit.spec.treatment.bestTCO,'$',0)));
          tr.append(DOM.td(guru.hit.spec.treatment.bestBenefit));
          tr.append(DOM.td(accounting.toFixed(guru.hit.spec.treatment.bestBenefitCost,3)));
        }
        table.append(tr);

        //accept
        tr = DOM.tr();
        tr.append(DOM.th('Acceptable'));
        tr.append(DOM.td(guru.hit.spec.treatment.accept));
        if (guru.hit.spec.treatment.acceptTCO) {
          tr.append(DOM.td(accounting.formatMoney(guru.hit.spec.treatment.acceptTCO,'$',0)));
          tr.append(DOM.td(guru.hit.spec.treatment.acceptBenefit));
          tr.append(DOM.td(accounting.toFixed(guru.hit.spec.treatment.acceptBenefitCost,3)));
        }
        table.append(tr);
        output.append(table);
        
      });
    
    });
    
    
    TTI.showBallpark = false;
    
    campfire.subscribe('show-ballpark-checkbox',function(){
      jQuery('.ballpark-wrap').show();
    });


    var ballparkDiv = jQuery('.ballpark');
    var cbBallpark = jQuery('.ballpark-checkbox');
    var lengthInput = jQuery('.length');
    var widthInput = jQuery('.width');
    
    
    cbBallpark.click(function(){
      //console.log(this.checked);
      campfire.publish('show-ballpark-inputs',this.checked);
    });
    
    campfire.subscribe('show-ballpark-inputs',function(show){
      if (!show) { ballparkDiv.hide(); }
      else { 
        TTI.showBallpark = true;
        ballparkDiv.show(); 
      }
    });

    campfire.subscribe('recalc',function(o){
      TTI.gurus.each(function(guru){
        guru.publish('recalc',o);
      });
      campfire.publish('redraw-output');
    });



    campfire.subscribe('force-recalc',function(){
      var length = parseFloat(lengthInput.val());
      var width = parseFloat(widthInput.val());
      campfire.publish('recalc', { length: length, width: width });
    });

    
    lengthInput.change(function(){ campfire.publish('force-recalc'); });
    widthInput.change(function(){ campfire.publish('force-recalc'); });


    campfire.subscribe('single-hit',function(guru){
      if (! TTI.showBallpark) { return false; } //nevermind...
      campfire.publish('force-recalc');
    });

    
    ////var lightbox = false;
    var lightboxContent = DOM.div();
    var lightbox = TTI.Widgets.Lightbox({
        content: lightboxContent,
        top: (TTI.scrollTop() * 1.1) + 'px',
        left: '15%',
        width: '70%',
        scrollTopCallback: function() { return (TTI.scrollTop() * 1.1) + 'px'; }
    });

    campfire.subscribe('image-clicked',function(url){
      var img = DOM.img();
      img.attr('src',url);


      /**
      img.css('width','100%');
      img.css('float','left');
      ***/
    
      lightboxContent.empty();
      lightboxContent.append(img);
      lightbox.show();
    });
    
    var output = jQuery('.output');
    var btnPDF = jQuery('.btn-pdf');
    
    btnPDF.click(function(){
      campfire.publish('redraw-output');
      var doc = new jsPDF();
      
      doc.fromHTML(output.html());
      doc.save();
    });
    
    ////TTI.storage.clear();
    
    facilityName.focus().select();
    
  
  </script>
</body>
</html>
