<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Your Facility: ACRP 09-11</title>
   <!-- Bootstrap -->
    <link href="css/bootstrap.min.css" rel="stylesheet" media="screen">
    <link href="css/bootstrap-theme.min.css" rel="stylesheet" media="screen">
    <link href="css/acrp0911.css?v=20160525" rel="stylesheet" media="screen,print">
    <link href="css/acrp0911-facility.css?v=20160525" rel="stylesheet" media="screen,print">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">


    <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css' media="print">
    <script type="text/javascript" src="//cdn.rawgit.com/niklasvh/html2canvas/0.5.0-alpha2/dist/html2canvas.min.js"></script>

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    
    <link href="css/report.css?v=20160525" rel="stylesheet" media="print">
</head>

<body class="facility">
  <header class="navbar navbar-static-top navbar-inverse" id="top" role="banner">
  <div class="container v2">
    <div class="navbar-header">
      <button class="navbar-toggle collapsed" type="button" data-toggle="collapse" data-target=".bs-navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a href="index.htm" class="navbar-brand">ACRP 09-11</a>
    </div>
    <nav class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav">
        <li>
          <a href="index.htm">Home</a>
        </li>
        <li class="active">
          <a href="facility.htm">Your Facility</a>
        </li>
        <!-- <li>
          <a href="help.htm">Help</a>
        </li> -->
        <li>
          <a href="appendix.htm">
            Appendix
          </a>
        </li>
        <li>
          <button class="btn btn-info btn-clear">Clear</button>
        </li>

      </ul>
      
    </nav>
  </div><!-- end .container -->
  </header>


  <div class="container noprint">
    <div class="page-header">
      <h1>Your Facility</h1>
      <h2>Determining and Evaluating Your Options</h2>
      <p>If you are not familiar with the names of pavement distresses, you may choose to start by <strong><a href="browse-full-list.htm">browsing the full list</a></strong>.</p> 
      <p>Otherwise, please proceed below. </p>
    </div> 
  </div>

  <div class="container tool">
    <div class="row onlyprint">
      <div class="col-md-12">
        <table>
          <tr class="title-row"><th colspan="2">Inputs Summary</th></tr>
          <tr><th>Feature Identifier</th><td class="report-facilityName"></td></tr>
          <tr><th>State</th><td class="report-state"></td></tr>
          <tr><th>County</th><td class="report-county"></td></tr>
          <tr><th>FAA Airport Classification</th><td class="report-category"></td></tr>
          <tr><th>Pavement Type</th><td class="report-surfaceType"></td></tr>
        </table>
      </div>
    </div>
  
  
    <div class="row show-grid">
      <div class="col-md-12">
      
        <div class="noprint">
        

          <h5 class="">Feature Identifer (Optional)</h5>
          <p class="noprint">For example, Runway, Taxiway, Apron</p>
          <input id="facility-name" type="text" />
    
          <h5>State (for climate determination) <sup class="required noprint">*</sup></h5>
          <select id="state" class="noprint"></select>
          <select id="county" class="noprint"></select>
          <ul class="sticky-controls noprint"></ul>


        
        
        </div>

  
        <div style="clear: both;">&nbsp;</div>
        <div class="stage distress-guru-stage">&nbsp;</div><!-- stage -->
        <button class="btn btn-new-scenario btn-primary btn-lg noprint display-none"><i class="fa fa-plus"></i> Add / Identify a Distress</button>
        <br />



        <div class="initial-analysis-wrap" style="display:none;">
          <h3>Initial Analysis</h3>        
          <div class="stage summary-stage initial-summary-stage">&nbsp;</div>
        </div><!-- initial-analysis-wrap -->
  
        <div class="pci-curves-wrap onlyprint page">
        
        </div><!-- pci-curves-wrap -->
  
  
      </div><!-- end col-md-12 -->
    </div><!-- end .row.show-grid -->

    <div class="ballpark-wrap" style="display:none;">


      <div class="noprint">
        <input class="ballpark-checkbox" type="checkbox"> Use the Ballpark Benefit/Cost Estimator for all treatments?
      </div>

      <div class="ballpark" style="display:none;">
        <div class="ballpark-inputs">
          Please enter the length and width, in feet, of feature<br/>
          <input class="length" type="text" placeholder=" length (feet)">
          <input class="width" type="text" placeholder=" width (feet)">
        </div><!-- ballpark-inputs -->
        <div class="ballpark-output"></div><!-- ballpark-output -->
      </div><!-- ballpark -->
      <br />
      <br />
      
      <div class="final-analysis-wrap">
        <h2>Final Analysis</h2>
        <div class="final-analysis"></div>
        <p>For all treatments except sealing and patching, it is recommended that a professional engineering firm with airport experience be engaged</p>
          <div class="stage summary-stage final-summary-stage" style="display: none;">&nbsp;</div>
      </div>
      
      <button class="btn btn-success btn-pdf btn-lg noprint"><i class="fa fa-print"></i> Print Report</button>
      <div class="output"></div>
    </div><!-- ballpark-wrap -->
  </div><!-- container -->

	<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="js/bootstrap.min.js"></script>
    <script src="jquery-1.11.3.min.js"></script>

    <script src="lib/accounting.min.js"></script>

    <script src="js/array.js"></script>
    <script src="js/eachify.js"></script>
    <script src="js/dom.js"></script>
    <script src="js/tti.pubsub.js"></script>
    <script src="js/tti.storage.js"></script>
    <script src="js/csvjson.js"></script>

    <!--<script src="js/tti.widgets.tco-estimator.js"></script>-->
    <script src="js/tti.widgets.procrastinator.js"></script>
    <script src="js/tti.widgets.lightbox.js"></script>
    <script src="js/tti.guru.js?v=20160525"></script>
    <script src="js/tti.widgets.summarytable.js"></script>
    
    <script src="lib/TTI.js"></script>
    <script src="js/tti.distress.js?v=20160525"></script>
    <script src="js/tti.distresscategory.js?v=20160525"></script>
    <script src="js/tti.datastore.js?v=20160525"></script>
    <script src="js/tti.scenario.js"></script>
    <script src="js/bootup.js?v=20160525"></script>


  <script type="text/javascript">
  
    TTI.errors = [];

    function scenarioFight(candidates) {
      var winners = [];
      return winners;
    }
    
    TTI.sticky = {};


    var stickyDimensions = [
        /** these are now sticky.**/
        { label: 'FAA Airport Classification', property: 'category', choices: ['Basic','Local','Regional','National'] },
        //{ label: 'Wet/Dry', property: 'wetDry', choices: ['wet','dry'] },
        //{ label: 'Freeze/No Freeze', property: 'freezeNoFreeze', choices: ['freeze','no freeze'] },
        { label: 'Pavement Type (asphalt or concrete)', property: 'surfaceType', choices: ['asphalt','concrete'] },
        /**/
    ];

    
    
    function noTrailingComma(o) {
      var result = o.trim();
      result = result.replace(/,\ +$/,'');
      result = result.replace(/,$/,'');
      return result;
    }

    function noTrailingDash(o) {
      var result = o.trim();
      result = result.replace(/-\ +$/,'');
      result = result.replace(/-$/,'');
      return result;
    }
    
    function cleanUp(o) {
      ///console.log('cleanup called');
      if (o.severity) {
        o.severity = o.severity.trim();
        if (o.severity && o.severity.match(/sev$/i)) { o.severity += 'erity';  }
        if (o.severity && o.severity.match(/lowsev/i)) { o.severity = 'Low severity'; }
        if (o.severity && o.severity.match(/medsev/i)) { o.severity = 'Medium severity'; }
        if (o.severity && o.severity.match(/modsev/i)) { o.severity = 'Medium severity'; }
        if (o.severity && o.severity.match(/hi\ *sev/i)) { 
          ////console.log('match!!!!');
          o.severity = 'High severity'; 
        }
        if (o.severity && o.severity.match(/mod\ sev/i)) { o.severity = 'Medium severity'; }
        if (o.severity && o.severity.match(/med\ sev/i)) { o.severity = 'Medium severity'; }
      }
      if (o.amount) {
        o.amount = noTrailingDash(o.amount);
        o.amount = noTrailingComma(o.amount);
      }
      if (o.distressType) {
        o.distressType = noTrailingDash(o.distressType);
        o.distressType = noTrailingComma(o.distressType);
      }
      ///o.severity = 'asdfasdf';
    
    }
    
    
    var stateDropdown = jQuery('#state');
    var countyDropdown = jQuery('#county');
    
    
    var dataStore = false;

    campfire.subscribe('import-json',function(){

      TTI.importJSON('data/datastore.json',function(o){
        dataStore = TTI.DataStore({ data: o });
        
        campfire.publish('datastore-loaded');
      });



      TTI.importJSON('data/concrete.json',function(data){
        //console.log('data',data);
        data.each(function(o){
          o.surfaceType = 'concrete';
          cleanUp(o);
          TTI.scenarios.push(TTI.Scenario(o));
        });
      });
  
      TTI.importJSON('data/asphalt.json',function(data){
        //console.log('data',data);
        data.each(function(o){
          o.surfaceType = 'asphalt';
          cleanUp(o);
          TTI.scenarios.push(TTI.Scenario(o));
        });
      });


      TTI.importJSON('data/concrete-costs.json',function(data){
        data.each(function(o){
          TTI.costs.push(o);
        });
      });
      TTI.importJSON('data/asphalt-costs.json',function(data){
        data.each(function(o){
          TTI.costs.push(o);
        });
      });



      TTI.importJSON('data/concrete-benefits.json',function(data){
        data.each(function(o){
          TTI.benefits.push(o);
        });
      });
      TTI.importJSON('data/asphalt-benefits.json',function(data){
        data.each(function(o){
          TTI.benefits.push(o);
        });
      });

      
      
      /****
      TTI.import('data/distress-images.csv',function(data){
        var foo = csvjson.csv2json(data);
        /////console.log('foo',foo);
        foo.rows.each(function(row){
          TTI.distressImages.push(TTI.DistressImage(row));
        });
      });
      ***/
      
      TTI.import('data/pci-curves.csv',function(data){
        var foo = csvjson.csv2json(data);
        ////console.log('foo',foo);
        foo.rows.each(function(row){
          TTI.pciCurveImages.push(TTI.PCICurveImage(row));
        });
      });

      
      
      //TODO: Alaska, Oregon+Marion, Texas+Guadalupe have multiple climate records
      
      stateDropdown.append(DOM.option('-- Choose one --'));
      
      TTI.states = new TTI.Acrp.States("data/ClimaticZones.csv", function () {
      				///populateStateAndCountyLists();
        //read in from localstorage
        TTI.selectedState = false;
        TTI.storage.getItem('state',function(o){
          TTI.selectedState = TTI.states.get(o);
          if (TTI.selectedState.climate) {
            campfire.publish('climate-change',TTI.selectedState.climate);
          }
        });
        TTI.selectedCounty = false;
        TTI.storage.getItem('county',function(o){
          if (!TTI.selectedState.counties) { return false; }
          TTI.selectedCounty = TTI.selectedState.counties.get(o);
          if (TTI.selectedCounty.climate) {
            campfire.publish('climate-change',TTI.selectedCounty.climate);
          }
        });


        TTI.states.forEach(function(state){
          var opt = DOM.option(state.name);
          if (state.name == TTI.selectedState.name) {
            opt.attr('selected',true);
          }
          stateDropdown.append(opt);        
        });
        
        stateDropdown.change(function(){
          /////console.log('this.value',this.value);
          TTI.selectedState = TTI.states.get(this.value);
          ////console.log('state',TTI.selectedState);
          if (!TTI.selectedState) { 
            countyDropdown.hide();            
            return false; 
          }
          TTI.storage.setItem('state',TTI.selectedState.name);
          
          if (TTI.selectedState && TTI.selectedState.counties) {
            countyDropdown.show();
            countyDropdown.empty();
            countyDropdown.append(DOM.option('-- Choose one --'));
            TTI.selectedState.counties.forEach(function(county){
              var opt = DOM.option(county.name);
              if (county.name == TTI.selectedCounty.name) {
                opt.attr('selected',true);
              }
              countyDropdown.append(opt);        
            });
            countyDropdown.trigger('change'); //make the first one which populates active            
          }
          else {
            countyDropdown.hide();
            campfire.publish('climate-change',TTI.selectedState.climate);
          }
        });
        stateDropdown.trigger('change'); //make the first one which populates active
        
        
        countyDropdown.change(function(){
          TTI.selectedCounty = TTI.selectedState.counties.get(this.value);
          if (!TTI.selectedCounty) { 
            return false; 
          }
          TTI.storage.setItem('county',TTI.selectedCounty.name);

          campfire.publish('climate-change',TTI.selectedCounty.climate);
          ////console.log('TTI.selectedCounty',TTI.selectedCounty);
        });
      });
    
    });
    
    var distressGuruStage = jQuery('.distress-guru-stage');

    var initialAnalysisWrap = jQuery('.initial-analysis-wrap');
    var initialSummaryStage = jQuery('.initial-summary-stage');
    
    
    
    
    var finalSummaryStage = jQuery('.final-summary-stage');
    
    
    var stickyControls = jQuery('.sticky-controls');



    campfire.subscribe('boot-ui',function(){
      stickyDimensions.each(function(sd){
        var dimension = sd.property;
        
        TTI.storage.getItem(dimension,function(o){
          TTI.sticky[dimension] = o;
        });
        
        var choiceItems = sd.choices.map(function(o){
          ///console.log('o?',o);
          var label = o;
          label = label.replace(/asphalt/,'Asphalt');
          label = label.replace(/concrete/,'Concrete');
          
          return { label: label, object: o };
        });
        choiceItems.unshift({label: '-- Choose one --', object: false });
        var dropdown = DOM.select();
        choiceItems.each(function(choice){
          var opt = DOM.option(choice.label);
          if (choice.object && TTI.sticky[dimension] == choice.object) {
            opt.attr('selected',true);
          }
          dropdown.append(opt);
        });
        
        
        dropdown.change(function(){
          var selected = choiceItems[this.selectedIndex].object;
          TTI.sticky[dimension] = selected;
          TTI.storage.setItem(dimension,selected);            
          
          campfire.publish('sticky-changed',TTI.sticky);
        });
        
        dropdown.focus(function(){
          campfire.publish('dropdown-focus-' + dimension);
        });
        dropdown.blur(function(){
          campfire.publish('dropdown-blur-' + dimension);
        });
        
        
        
        var control = DOM.li().addClass('control');
        control.append(DOM.label(sd.label));

        control.append('&nbsp;');
        control.append(DOM.sup('*').addClass('required'));
        
        control.append(DOM.br());
        control.append(dropdown);
        stickyControls.append(control);
      });
    });

    campfire.publish('import-json');
    campfire.publish('boot-ui');
    
    var btnNewScenario = jQuery('.btn-new-scenario');
    btnNewScenario.click(function(){ campfire.publish('new-scenario'); });


    var initialSummaryTable = TTI.Widgets.SummaryTable({});
    initialSummaryTable.renderOn(initialSummaryStage);    
    initialSummaryTable.subscribe('image-clicked',function(o){
      campfire.publish('image-clicked',o);
    });
    ////console.log('initialSummaryTable hash',initialSummaryTable.hash);
    
    initialSummaryTable.subscribe('ballpark-update',function(hits){
      console.log('** ** ** BALLPARK TCO',hits);
      var wrap = jQuery('.ballpark-output');
      var tmpRow, tr, th, td, rounded;

      wrap.empty();
      
      hits.forEach(function(hit){
      
      
        var responsiveDiv = DOM.div().addClass('table-responsive');

        var rounded;      
        var table = DOM.table().addClass('table table-bordered table-condensed');


        
        var sqft = Math.round(parseFloat(TTI.cache.length) * parseFloat(TTI.cache.width));
        var dims = accounting.formatNumber(sqft) + ' sq ft';        

      
        tmpRow = DOM.tr();
        tmpRow.append(DOM.th('Ballpark Estimator for ' + hit.spec.distressDesc + ' (' + dims + ')').attr('colspan',3).addClass('th-inverse'));
        table.append(tmpRow);


        tmpRow = DOM.tr();
        
        
        tmpRow.append(DOM.th('&nbsp;'));
        tmpRow.append(DOM.th('Recommended'));
        tmpRow.append(DOM.th('Acceptable'));
        table.append(tmpRow);


        tmpRow = DOM.tr();
        tmpRow.append(DOM.th('Treatment'));
        tmpRow.append(DOM.td(hit.spec.treatment.best));
        tmpRow.append(DOM.td(hit.spec.treatment.accept));
        table.append(tmpRow);



        tmpRow = DOM.tr();
        tmpRow.append(DOM.th('Cost Estimate'));
        
        rounded = hit.spec.treatment.bestTCO;
        rounded = accounting.formatMoney(rounded,'$',0);
        tmpRow.append(DOM.td(rounded));

        rounded = hit.spec.treatment.acceptTCO;
        rounded = accounting.formatMoney(rounded,'$',0);
        tmpRow.append(DOM.td(rounded));

        table.append(tmpRow);


        /****





        tmpRow = DOM.tr();
        tmpRow.append(DOM.th('Recommend Treatment'));
        tmpRow.append(DOM.td(hit.spec.treatment.best));
        table.append(tmpRow);

        tmpRow = DOM.tr();
        tmpRow.append(DOM.th('Ballpark Cost Estimate'));
        var rounded = hit.spec.treatment.bestTCO;
        rounded = accounting.formatMoney(rounded,'$',0);
        tmpRow.append(DOM.td(rounded));
        table.append(tmpRow);

        tmpRow = DOM.tr();
        tmpRow.append(DOM.th('Acceptable Treatment'));
        tmpRow.append(DOM.td(hit.spec.treatment.accept));
        table.append(tmpRow);

        tmpRow = DOM.tr();
        tmpRow.append(DOM.th('Ballpark Cost Estimate'));
        var rounded = hit.spec.treatment.acceptTCO
        rounded = accounting.formatMoney(rounded,'$',0);
        tmpRow.append(DOM.td(rounded));
        table.append(tmpRow);
        **/


        responsiveDiv.append(table);      
        wrap.append(responsiveDiv);
      });
      
    });


    var finalSummaryTable = TTI.Widgets.FinalSummaryTable();
    finalSummaryTable.renderOn(finalSummaryStage);    
    finalSummaryTable.subscribe('image-clicked',function(o){
      campfire.publish('image-clicked',o);
    });
    TTI.finalSummaryTable = finalSummaryTable;
















    
    campfire.subscribe('new-scenario',function(){
      var candidates = TTI.getStickyScenarios();
      var guru = TTI.Guru({
        position: TTI.gurus.length + 1,
        candidates: candidates
      });
      
      
      guru.subscribe('show-lightbox',function(formatter){
        campfire.publish('show-lightbox',formatter);
      });



      var drillDown = DOM.div().addClass('drill-down'); 
      guru.renderOn(drillDown);
      distressGuruStage.append(drillDown);
      TTI.gurus.push(guru);
      

      guru.subscribe('remove',function(){
        ///console.log(TTI.gurus.length,'gurus');
        TTI.gurus = TTI.gurus.select(function(o) {
          return o.hash !== guru.hash;
        });
        ///console.log(TTI.gurus.length,'gurus');
        drillDown.remove();
        
        campfire.publish('guru-removed',guru);
      });
      
      
      campfire.publish('guru-added',guru);
      
      guru.subscribe('single-hit',function(){
        campfire.publish('show-ballpark-checkbox');
        campfire.publish('single-hit',guru);
      });


      guru.subscribe('multiple-hits',function(){
        campfire.publish('multiple-hits',guru);
      });
      guru.subscribe('zero-hits',function(){
        campfire.publish('zero-hits',guru);
      });
      
      guru.subscribe('image-clicked',function(o){
        campfire.publish('image-clicked',o);
      });
      
      guru.subscribe('blip-hover-start',function(o){
        campfire.publish('blip-hover-start',o);
      });
      guru.subscribe('blip-hover-end',function(o){
        campfire.publish('blip-hover-end',o);
      });
    
      //scroll page down to location of new scenario button    
     jQuery('html, body').animate({
            scrollTop: jQuery('.guru-title:last').offset().top
        }, 800);    
      
    });

    
    
    
    campfire.subscribe('single-hit',function(){ //from one of the gurus
      campfire.publish('populate-initial-summary');
      campfire.publish('populate-final-summary');
    });    
    campfire.subscribe('multiple-hits',function(){ //from one of the gurus
      campfire.publish('populate-initial-summary');
      campfire.publish('populate-final-summary');
    });    
    campfire.subscribe('zero-hits',function(){ //from one of the gurus
      campfire.publish('populate-initial-summary');
      campfire.publish('populate-final-summary');
    });


    campfire.subscribe('guru-removed',function(guru){
      campfire.publish('populate-initial-summary');
      campfire.publish('populate-final-summary');
    });





    campfire.subscribe('populate-initial-summary',function(){
    
      var candidates = TTI.gurus.select(function(o){
        return o.hit;  //narrow down to those which have a hit.
      }).map(function(o) {
        return o.hit;
      });
      if (candidates.length == 0) {
        finalSummaryTable.refresh();
        finalSummaryStage.hide();
        initialAnalysisWrap.hide();
        return false;
      }
      console.log('INITIAL SUMMARY CANDIDATES',candidates);
      initialSummaryTable.update(candidates);
      initialAnalysisWrap.show();
      
      
      var pciWrap = jQuery('.pci-curves-wrap');
      pciWrap.empty();
      var images = initialSummaryTable.getPCICurveImages();
      console.log('images>>>',images);
      images.forEach(function(image){
        var img = DOM.img().attr('src',image.url());
        pciWrap.append(img);
      });
    });

    campfire.subscribe('populate-final-summary',function(){
      campfire.publish('fight-it-out');
    });



    campfire.subscribe('fight-it-out',function(){
      console.log('fight-it-out called');
      
      var candidates = TTI.gurus.select(function(o){
        return o.hit;  //narrow down to those which have a hit.
      }).map(function(o) {
        return o.hit;
      });
      console.log('FIGHTERS',candidates);
      
      
      if (candidates.length == 0) {
        finalSummaryTable.refresh();
        finalSummaryStage.hide();
        return false;
      }
      
      
      var bestTreatmentSeverityScore = function(o) {
        return o.spec.treatment.bestID; //higher IDs are more severe.
      };
      
      var sorted = candidates.sort(TTI.sorter(bestTreatmentSeverityScore));

      console.log('sorted',sorted);
      
      while (sorted.length > 2) {
        sorted.shift();
      };

      if (sorted.length == 2) {
        //FIGHT!
        var aID = sorted[0].spec.treatment.bestID;
        var bID = sorted[1].spec.treatment.bestID;
        
        var tieBreaker = dataStore.data.detect(function(o){
          if (o.dataType !== 'treatmentHierarchy') { return false; }
          return o.treatments[0] == aID && o.treatments[1] == bID;
        });
        
        ///////console.log('tie breaker',tieBreaker);
      
        var winners = sorted.select(function(o){
          return tieBreaker.winners.detect(function(winnerID){
            return o.spec.treatment.bestID == winnerID;
          });
        });
        
        
        
        
        
        finalSummaryTable.update(winners);
        TTI.winners = winners;
      }
      else {
        finalSummaryTable.update(sorted);
        TTI.winners = sorted;
      }
      /////summaryTable.refresh();
      
      console.log('winners',TTI.winners);
      finalSummaryStage.show();
      initialAnalysisWrap.show();
      
    

    });
    
    
    
    campfire.subscribe('sticky-changed',function(){
      ////console.log('sticky-changed!!!wooo');
      TTI.gurus.each(function(guru){
        guru.update(TTI.sticky);
      });

      var proceed = TTI.sticky.wetDry && TTI.sticky.freezeNoFreeze && TTI.sticky.category && TTI.sticky.surfaceType;
      if (proceed) {
        btnNewScenario.removeClass('display-none');
      }
    });
    
    campfire.subscribe('climate-change',function(climate){
      var condition = TTI.Acrp.ClimateCondition[climate.condition]
      var temp = TTI.Acrp.ClimateTemperature[climate.condition]    
      temp = temp.toLowerCase();
      condition = condition.toLowerCase();
      temp = (temp == 'nofreeze') ? 'no freeze' : temp;
      
      ///console.log('condition',condition);
      /////console.log('temp',temp);



      if (condition == 'wetanddry') { condition = 'wet'; }//FIXME
      if (temp == 'freezeandnofreeze') { temp = 'freeze'; }//FIXME


      
      TTI.sticky.wetDry = condition;
      TTI.sticky.freezeNoFreeze = temp;
      
      campfire.publish('sticky-changed',TTI.sticky);
      
    });
    
    var facilityName = jQuery('#facility-name');
    facilityName.change(function(){
      TTI.storage.setItem('facilityName',this.value);
    });
    
    
    
    TTI.storage.getItem('facilityName',function(o){
      facilityName.val(o);
    });
    

    campfire.subscribe('redraw-output',function(){
      ['facilityName','state','county','category','surfaceType'].forEach(function(key){
        TTI.storage.getItem(key,function(o){
          jQuery('.report-' + key).text(o);
        });
      });
    });
    


    
    campfire.subscribe('was-redraw-output',function(){


      var table;    
      var tr;
      var td;
      var th;


      output.empty();

      ////var today = new Date();
      //var dateString = (today.getMonth() +1) + '/' + today.getDate() + '/' + today.getFullYear();
      //var timeString = today.getHours() + ':' + today.getMinutes()
      
      var dateTimeString = TTI.prettyDate(new Date());
      output.append(DOM.div(dateTimeString));

      table = DOM.table();
      
      TTI.storage.getItem('facilityName',function(o){
        tr = DOM.tr();
        tr.append(DOM.th('Facility Name'));
        tr.append(DOM.td(o));
        table.append(tr);      
      });
      
      
      
      stickyDimensions.each(function(o){
        tr = DOM.tr();
        tr.append(DOM.th(o.label));
        tr.append(DOM.td(TTI.sticky[o.property]));
        table.append(tr);
      });
      
      
      

      tr = DOM.tr();
      tr.append(DOM.th('Climate'));
      var climateString = TTI.sticky.wetDry + ' / ' + TTI.sticky.freezeNoFreeze;
      tr.append(DOM.td(climateString));
      table.append(tr);
      output.append(table);      


    
      TTI.gurus.forEach(function(guru,i){
        output.append('<!-- ADD_PAGE -->');        


        output.append(DOM.h2('Distress #' + (i+1)));
        table = DOM.table();
        orderedDimensions.each(function(o){
          var value = guru.hit.spec[o.property];
          if (value && typeof value != "undefined") {
            tr = DOM.tr();
            tr.append(DOM.th(o.label));
            tr.append(DOM.td(value));
            table.append(tr);
          }
        });
        
        
        
        if (lengthInput.val() && widthInput.val()) {
          tr = DOM.tr();
          tr.append(DOM.th('Dimensions'));
          
          var length = parseFloat(lengthInput.val());
          var width = parseFloat(widthInput.val());
          var sqft = length*width;
          
          var dimString = accounting.toFixed(length,1) + ' ft x ' + accounting.toFixed(width,1) + ' ft (' + accounting.toFixed(sqft,1) + ' sqft)';
          tr.append(DOM.td(dimString));
          table.append(tr);
        }


        
        output.append(table);
      });
      
      TTI.winners.forEach(function(hit,i){


        if (hit.spec.treatment.acceptTCO) {
          output.append(DOM.div('Cost, Benefit, and Benefit/Cost figures are ballpark estimates'));
        }
        
        table = DOM.table();
        //header
        var headRow = DOM.tr();
        headRow.append(DOM.th('&nbsp;'));
        headRow.append(DOM.th('Treatments'));
        headRow.append(DOM.th('Cost Basis'));
        headRow.append(DOM.th('Benefit'));
        headRow.append(DOM.th('B/C'));
        table.append(headRow);

        var rowData = [
          {
            label: 'Recommended',
            treatmentSlug: 'best',
            treatmentDesc: hit.spec.treatment.best,
          },{
            label: 'Acceptable',
            treatmentSlug: 'accept',
            treatmentDesc: hit.spec.treatment.accept,
          }
        ];


        rowData.each(function(row){

          //rec
          tr = DOM.tr();
          tr.append(DOM.th(row.label));
          tr.append(DOM.td(row.treatmentDesc));

          var cost = TTI.lookupCost(hit.spec.surfaceType,hit.spec.distressDesc,row.treatmentDesc);

          tr.append(DOM.td(accounting.formatMoney(hit.spec.treatment.bestCostBasis,'$',0) + TTI.formatCostBasis(cost) ));
          tr.append(DOM.td(hit.spec.treatment.bestBenefit));
          tr.append(DOM.td(accounting.toFixed(hit.spec.treatment.bestBenefitCost,3)));
          table.append(tr);
          ////tr.append(DOM.td(accounting.formatMoney(winner.spec.treatment.bestTCO,'$',0)));
        });
        
        output.append(table);
      });
    });    
    
    TTI.showBallpark = false;
    
    campfire.subscribe('show-ballpark-checkbox',function(){
      jQuery('.ballpark-wrap').show();
    });


    var ballparkDiv = jQuery('.ballpark');
    var cbBallpark = jQuery('.ballpark-checkbox');
    
    var lengthInput = jQuery('.length');
    lengthInput.keypress(TTI.cellValidator);
    
    var widthInput = jQuery('.width');
    widthInput.keypress(TTI.cellValidator);
    
    
    
    
    cbBallpark.click(function(){
      //console.log(this.checked);
      campfire.publish('show-ballpark-inputs',this.checked);
    });
    
    campfire.subscribe('show-ballpark-inputs',function(show){
      if (!show) { ballparkDiv.hide(); }
      else { 
        TTI.showBallpark = true;
        ballparkDiv.show(); 
        lengthInput.focus();
      }
    });

    campfire.subscribe('recalc',function(o){
      TTI.cache.length = o.length;
      TTI.cache.width = o.width;
    
    
      initialSummaryTable.publish('recalc',o);
      finalSummaryTable.publish('recalc',o);
      TTI.gurus.each(function(guru){
        guru.publish('recalc',o);
      });
      campfire.publish('redraw-output');
    });



    campfire.subscribe('force-recalc',function(){
      var length = parseFloat(lengthInput.val());
      var width = parseFloat(widthInput.val());
      campfire.publish('recalc', { length: length, width: width });
    });

    
    lengthInput.change(function(){ campfire.publish('force-recalc'); });
    widthInput.change(function(){ campfire.publish('force-recalc'); });


    campfire.subscribe('single-hit',function(guru){
      if (! TTI.showBallpark) { return false; } //nevermind...
      campfire.publish('force-recalc');
    });

    
    ////var lightbox = false;
    var lightboxContent = DOM.div();
    var lightbox = TTI.Widgets.Lightbox({
        content: lightboxContent,
        top: (TTI.scrollTop() + 10) + 'px',
        left: '15%',
        width: '70%',
        scrollTopCallback: function() { return (TTI.scrollTop() + 10) + 'px'; }
    });
    
    campfire.subscribe('show-lightbox',function(formatter){

      lightboxContent.empty();
      var div = DOM.div();
      formatter(div);
      lightboxContent.append(div);
      
      lightbox.show();
    });

    campfire.subscribe('image-clicked',function(o){
      var url = o.url;
      var title = o.title;
    
      var img = DOM.img();
      img.attr('src',url);
      img.attr('title',title);


      /**
      img.css('width','100%');
      img.css('float','left');
      ***/
    
      lightboxContent.empty();
      lightboxContent.append(img);
      lightbox.show();
    });
    
    var output = jQuery('.output');
    var btnPDF = jQuery('.btn-pdf');
    
    btnPDF.click(function(){
    
      window.print(); //keep it simple
    
      /**
      var doc = new jsPDF('p','pt','letter');
      campfire.publish('output-pdf',doc)    
      ***/
    
    });
    
    



    var blipBox = DOM.div().addClass('blip-box');
    jQuery(document.body).append(blipBox);
    var hovering = false;
    var lastHover = -1;


    campfire.subscribe('blip-maybe-fade',function(){
      if (hovering) { return false;}
      blipBox.fadeOut();
    });
    
    campfire.subscribe('blip-hover-start',function(callback){
      hovering = true;
      blipBox.empty();
      callback(blipBox);
      
      blipBox.css('top',(TTI.scrollTop() + 25) + 'px');
      blipBox.fadeIn();
      lastHover = (new Date()).getTime();
    });
    

    campfire.subscribe('blip-hover-end',function(callback){
        hovering = false;
        setTimeout(function(){
          campfire.publish('blip-maybe-fade',null);
        },600);
    });
    

    TTI.import('data/help.faa-airport-classifications.html',function(data){
      TTI.airportClassificationHTML = data;
    });
    
    TTI.import('data/help.benefit.html',function(data){
      TTI.benefitHTML = data;
    });   
    
    
    
    
    campfire.subscribe('dropdown-focus-category',function(){
      campfire.publish('show-lightbox',function(wrap){
        wrap.append(DOM.h4('FAA Airport Classification'));
        wrap.append(TTI.airportClassificationHTML);
      });      
      /***********************
      campfire.publish('blip-hover-start',function(wrap){
        wrap.append(DOM.h4('FAA Airport Classification'));
        wrap.append(TTI.airportClassificationHTML);
      });
      
      setTimeout(function(){
        campfire.publish('blip-hover-end');
      },6 * 1000);
      **********/
    });
    
    
    
    campfire.subscribe('dropdown-blur-category',function(){
      campfire.publish('blip-hover-end');
    });
    
    var btnClear = jQuery('.btn-clear');
    btnClear.click(function(){
      localStorage.clear();
      window.location.reload();
    });
    
    
    
    ////TTI.storage.clear();

    setTimeout(function(){
      campfire.publish('sticky-changed');
      
    },500);
    
    facilityName.focus().select();



    campfire.subscribe('datastore-loaded',function(){
      TTI.importJSON('data/distress-descriptions.json',function(o){
        o.each(function(o){
          //console.log('whoooo?#?##',o);
          var hit = dataStore.data.detect(function(record) {  return record.dataType == 'distress' && record.id == o.distress; });
          ////console.log('hit?',hit);
          hit.distressDesc = o.desc;          
        });
      });

      campfire.publish('redraw-output');

    });
    
  
  </script>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-417427-51', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>
