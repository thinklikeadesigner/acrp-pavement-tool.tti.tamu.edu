<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
	<title>ACRP 09-11</title>
   <!-- Bootstrap -->
    <link href="css/bootstrap.min.css" rel="stylesheet">
    <link href="css/bootstrap-theme.min.css" rel="stylesheet">
    <link href="css/acrp0911.css" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    
    <style type="text/css">
      .hit-count { font-size: 2rem; font-weight: bold; }
      .th-inverse { 
        color: #FFF;
        background-color: #363636;
      }    

      .sticky-controls li { list-style-type: none; }
      .controls .control { float: left; display: inline; margin: 1rem; list-style-type: none; }


      select[disabled=disabled] { color: #999; text-indent: -900px; }

    </style>
</head>

<body>
  <header class="navbar navbar-static-top navbar-inverse" id="top" role="banner">
  <div class="container v2">
    <div class="navbar-header">
      <button class="navbar-toggle collapsed" type="button" data-toggle="collapse" data-target=".bs-navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a href="index.htm" class="navbar-brand">ACRP 09-11</a>
    </div>
    <nav class="collapse navbar-collapse bs-navbar-collapse">
      <ul class="nav navbar-nav">
        <li>
          <a href="index.htm">Home</a>
        </li>
        <li>
          <a class="active" href="facility.htm">Your Facility</a>
        </li>
        <li>
          <a href="calculator.htm">
            Cost-Benefit Calculator
          </a>
        </li>
        <li>
          <a href="distresses.htm">All Distresses</a>
        </li>
        
        <li>
          <a href="final-report.htm">Project Final Report</a>
        </li>
      </ul>
      
    </nav>
  </div><!-- end .container -->
  </header>


  <div class="container">

    
    <label>Pavement Type</label>
    <input type="radio" name="pavementType" value="asphalt" checked="checked" /> Asphalt
    <input type="radio" name="pavementType" value="concrete" /> Concrete
    <input id="file" type="file" style="" />



    <h5>Sticky Controls (apply to each distress)</h5>
    <ul class="sticky-controls"></ul>

    <div style="clear: both;">&nbsp;</div>
    <button class="btn btn-new-scenario"><i class="fa fa-plus"></i> New Distress</button>

    <div class="stage">
    </div><!-- stage -->



  </div>

	<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="js/bootstrap.min.js"></script>
    <script src="jquery-1.11.3.min.js"></script>

    <script src="js/array.js"></script>
    <script src="js/eachify.js"></script>
    <script src="js/dom.js"></script>
    <script src="js/pubsub.js"></script>
    <script src="js/storage.js"></script>
    <script src="js/csvjson.js"></script>
    <script src="js/tti.guru.js"></script>
    <script src="js/bootup.js"></script>

  <script type="text/javascript">

    var campfire = TTI.PubSub({});
  
    var fileInput = jQuery('#file');
  
    TTI.errors = [];
  
    TTI.precision = function(value,digits) {
      var coeff = Math.pow(10,digits);
      return Math.round(value * coeff) / coeff;
    };



    TTI.Benefit = function(spec) {
      var self = TTI.PubSub({});
      return self;
    };
    
    
    
    
    var columnAlpha = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','AA','AB','AC','AD','AE','AF','AG'];

    TTI.firstLine = false;
    TTI.firstLineByColumn = {};

    
    TTI.benefits = [];
    TTI.sticky = {};


    var stickyDimensions = [
        /** these are now sticky.**/
        { label: 'Airport Classification', property: 'category', choices: ['Regional','National','Basic','Local'] },
        { label: 'Wet/Dry', property: 'wetDry', choices: ['wet','dry'] },
        { label: 'Freeze/No Freeze', property: 'freezeNoFreeze', choices: ['freeze','no freeze'] },
        { label: 'Pavement Type', property: 'surfaceType', choices: ['concrete','asphalt'] },
        /**/
    ];



    TTI.getStickyScenarios = function() {
      var result = TTI.scenarios;
      for (var field in TTI.sticky) {
        result = result.select(function(scenario){
          if (! TTI.sticky[field]) { return true; }
          return scenario[field] == TTI.sticky[field];
        });
      }
      
      return result;
    };

    

    var fileInput = jQuery('#file');  
    fileInput.change(function(e){
      //console.log('fi',fileInput);
      var file = fileInput.prop('files')[0];
      var reader = new FileReader();
      reader.onload = function(e) {
        var input = reader.result;
        ///console.log('text input',input);
        campfire.publish('parse-input',input);
      };
      
      reader.readAsText(file);
    });
    
    
    function noTrailingComma(o) {
      var result = o.trim();
      result = result.replace(/,\ +$/,'');
      result = result.replace(/,$/,'');
      return result;
    }

    function noTrailingDash(o) {
      var result = o.trim();
      result = result.replace(/-\ +$/,'');
      result = result.replace(/-$/,'');
      return result;
    }
    
    function cleanUp(o) {
      ////console.log('cleanup called');
      if (o.severity) {
        o.severity = o.severity.trim();
        if (o.severity && o.severity.match(/sev$/i)) { o.severity += 'erity';  }
        if (o.severity && o.severity.match(/lowsev/i)) { o.severity = 'Low severity'; }
        if (o.severity && o.severity.match(/medsev/i)) { o.severity = 'Medium severity'; }
        if (o.severity && o.severity.match(/modsev/i)) { o.severity = 'Medium severity'; }
        if (o.severity && o.severity.match(/hi\ *sev/i)) { 
          ////console.log('match!!!!');
          o.severity = 'High severity'; 
        }
        if (o.severity && o.severity.match(/high/i)) { o.severity = 'High severity'; } 
        if (o.severity && o.severity.match(/moderate/i)) { o.severity = 'Medium severity'; } 
        if (o.severity && o.severity.match(/low/i)) { o.severity = 'Low severity'; } 
        
        
        if (o.severity && o.severity.match(/mod\ sev/i)) { o.severity = 'Medium severity'; }
        if (o.severity && o.severity.match(/med\ sev/i)) { o.severity = 'Medium severity'; }
      }
      if (o.amount) {
        o.amount = noTrailingDash(o.amount);
        o.amount = noTrailingComma(o.amount);
      }
      if (o.distressType) {
        o.distressType = noTrailingDash(o.distressType);
        o.distressType = noTrailingComma(o.distressType);
      }
      ///o.severity = 'asdfasdf';
    
    }
    
    
    function parseRow(opts) {
    
      var data = opts.data;
      var dataByColumn = {};
      columnAlpha.forEach(function(alpha,numeric){
        dataByColumn[alpha] = data[numeric];
      });


      console.log('dataByColumn',dataByColumn);

      var row = opts.row;
      ////var category = opts.category;
      
      
      var wetDry = false;
      var freezeNoFreeze = false;
      var distressDesc = data[0];

      var csf = {}, rejuv = {}, fog = {}, slurry = {}, chip = {}, overlay = {}, patch = {}, total = {}, cdr = {};

      function parseColumn(o) {
        var result = o.target;
        result.row = o.row;
        result.column = o.column; 

        result.treatmentDesc = o.treatmentDesc;//TTI.firstLineByColumn[o.column];
        //result.treatmentTags = TTI.tagify(result.treatmentDesc);
        result.distressDesc = distressDesc;
        //result.distressTags = TTI.tagify(result.distressDesc);
        

        result.surfaceType = TTI.pavementType;


        //result.cell = o.row + columnAlpha[o.column];       

        
        
        result.severity = false;
        result.amount = false;

        result.distressType = result.distressDesc;

        function severityMatch(match) {
          if (match) {
            result.severity = result.distressType.substr(match.index);
            result.distressType = result.distressType.substr(0,match.index);
            /////console.log('TYPE',result.distressType,'SEVERITY',result.severity);
          }
        }

        function amountMatch(match) {
          if (match) {
            result.amount = result.distressType.substr(match.index);
            result.distressType = result.distressType.substr(0,match.index);
            ///console.log('TYPE',result.distressType,'* ** * ** * AMOUNT',result.amount);
          }
        }



        ////var match;
        
        ///match = result.distressType.match(/low.*sev.*/i);
        severityMatch(result.distressType.match(/low.*sev.*/i));
        severityMatch(result.distressType.match(/med.*sev.*/i));
        severityMatch(result.distressType.match(/mod.*sev.*/i));
        severityMatch(result.distressType.match(/hi.*sev.*/i));


        severityMatch(result.distressType.match(/low.*/i));
        severityMatch(result.distressType.match(/moderate.*/i));
        severityMatch(result.distressType.match(/high.*/i));


        amountMatch(result.distressType.match(/spaced.*apart.*/i));
        amountMatch(result.distressType.match(/\d+%.*/i));
        


        if (!result.amount) { 
          var error = 'NO AMOUNT';
          ///console.log(error,result.distressDesc); 
          TTI.errors.push(error + ':' + result.distressDesc); 
        }
        if (!result.severity) { 
          var error = 'NO SEVERITY';
          //console.log(error,result.distressDesc); 
          TTI.errors.push(error + ':' + result.distressDesc); 
        }
        /****        
        if (match) {
          result.severity = result.distressType.substr(match.index);
          result.distressType = result.distressType.substr(0,match.index);
          console.log('low SEVERITY!!!','TYPE',result.distressType,'SEVERITY',result.severity);
        }
        ****/

        result.benefit = dataByColumn[result.column];
        result.benefit = TTI.moneyToFloat(result.benefit);


        
        cleanUp(result);

        if (result.amount && result.amount.match(/,/)) { console.log('okkk',result.amount +'GYN'); }
        
        
        return result;
      }

      csf = parseColumn({
        target: csf,
        row: row,
        column: 'G',  //  << the column labeled $/Unit
        treatmentDesc: TTI.firstLineByColumn['G']
      });

      rejuv = parseColumn({
        target: rejuv,
        row: row,
        column: 'H',
        treatmentDesc: TTI.firstLineByColumn['H']
      });

      fog = parseColumn({
        target: fog,
        row: row,
        column: 'I',
        treatmentDesc: TTI.firstLineByColumn['I']
      });

      slurry = parseColumn({
        target: slurry,
        row: row,
        column: 'J',
        treatmentDesc: TTI.firstLineByColumn['J']
      });
      
      chip = parseColumn({
        target: chip,
        row: row,
        column: 'K',
        treatmentDesc: TTI.firstLineByColumn['K']
      });

      overlay = parseColumn({
        target: overlay,
        row: row,
        column: 'L',
        treatmentDesc: TTI.firstLineByColumn['L']
      });

      patch = parseColumn({
        target: patch,
        row: row,
        column: 'M',
        treatmentDesc: TTI.firstLineByColumn['M']
      });
      total = parseColumn({
        target: total,
        row: row,
        column: 'N',
        treatmentDesc: TTI.firstLineByColumn['N']
      });
      
      if (TTI.pavementType == 'concrete') {
        cdr = parseColumn({
          target: cdr,
          row: row,
          column: 'O',
          treatmentDesc: TTI.firstLineByColumn['O']
        });
      }

      TTI.benefits.push(csf);
      TTI.benefits.push(rejuv);
      TTI.benefits.push(fog);
      TTI.benefits.push(slurry);
      TTI.benefits.push(chip);
      TTI.benefits.push(overlay);
      TTI.benefits.push(patch);
      TTI.benefits.push(total);

      if (TTI.pavementType == 'concrete') { 
        TTI.benefits.push(cdr);  
      }

    }
    
    
    campfire.subscribe('parse-input',function(input){
      //console.log('input',input);
      var sanitized = TTI.replaceWordChars(input);
      TTI.inspectMSText(sanitized);
      
      TTI.sanitized = sanitized;
      
      
      
      
      TTI.pavementType = jQuery('input[type=radio]:checked').val();
      
      console.log(TTI.pavementType);
      
      
      
      
      var lines = sanitized.split(/\r\n|\n/);
      ///console.log('lines',lines,lines.length);
      
      var category = false;
      var wetDry = false;
      var freezeNoFreeze = false;    
      
      
      
      lines.forEach(function(line,row){      
      
        var foo = csvjson.csv2json(line);
        var fields = foo.headers;
        
        //console.log('foo',foo);
        ////return false;

        if (row == 0) {
          TTI.firstLine = fields;
        }
        columnAlpha.forEach(function(alpha,numeric) {
          TTI.firstLineByColumn[alpha] = TTI.firstLine[numeric];
        });

        
        
        ///console.log('fields',fields);

        if (row <= 0) {
          //don't parse        
        
        }
        else if (line.length < 78) {
          //Don't Parse
        }
        else if (fields[1].match(/Accept/) && fields[2].match(/Best/) ) {
          //Don't parse
        }
        else if (row == 0) {
          //Don't parse
        }
        else {
          ///console.log('parse?',line);
          parseRow({
            /////category: category,
            data: fields,
            row: row+1,
          });
        }
        
        var halt = true;
        
        
        ///var recordType = fields.shift();      
        ///campfire.publish('record-' + recordType,fields);
      });
    });
    
    
    
    
    campfire.subscribe('import-json',function(){
      TTI.importJSON('data/concrete.json',function(data){
        //console.log('data',data);
        data.each(function(o){
          o.surfaceType = 'concrete';
          cleanUp(o);
          TTI.scenarios.push(o);
        });
      });
  
      TTI.importJSON('data/asphalt.json',function(data){
        //console.log('data',data);
        data.each(function(o){
          o.surfaceType = 'asphalt';
          cleanUp(o);
          TTI.scenarios.push(o);
        });
      });
    });
    
    var stage = jQuery('.stage');
    
    var stickyControls = jQuery('.sticky-controls');
    
    campfire.subscribe('boot-ui',function(){
        stickyDimensions.each(function(sd){
          var dimension = sd.property;
          
          
          var choiceItems = sd.choices.map(function(o){
            return { label: o, object: o };
          });
          choiceItems.unshift({label: 'Choose one', object: false });
          
          
          
          var dropdown = DOM.select();
          choiceItems.each(function(choice){
            var opt = DOM.option(choice.label);
            dropdown.append(opt);
          });
          dropdown.change(function(){
            var selected = choiceItems[this.selectedIndex].object;
            TTI.sticky[dimension] = selected;
            campfire.publish('sticky-changed',TTI.sticky);
          });
          
          
          var control = DOM.li().addClass('control');
          control.append(DOM.label(sd.label));
          control.append(DOM.br());
          control.append(dropdown);
          stickyControls.append(control);
        });
    });

    ////campfire.publish('import-json');
    //campfire.publish('boot-ui');
    
    jQuery('.btn-new-scenario').click(function(){ campfire.publish('new-scenario');    });
    
    campfire.subscribe('new-scenario',function(){
      var candidates = TTI.getStickyScenarios();
      var guru = TTI.Guru({ 
        candidates: candidates
      });

      var drillDown = DOM.div().addClass('drill-down'); 
      guru.renderOn(drillDown);
      stage.append(drillDown);
      TTI.gurus.push(guru);
    });
    
    campfire.subscribe('sticky-changed',function(){
      console.log('sticky-changed!!!wooo');
      TTI.gurus.each(function(guru){
        guru.update(TTI.sticky);
      });
    });
    
    
  
  </script>
</body>
</html>